"use strict";(self.webpackChunkkyoungah_dev_blog=self.webpackChunkkyoungah_dev_blog||[]).push([[171],{9337:function(n,a,s){s.r(a),s.d(a,{default:function(){return h}});var t=s(6540),e=s(8453);function p(n){const a=Object.assign({p:"p",a:"a",h2:"h2",h3:"h3",span:"span",ol:"ol",li:"li"},(0,e.R)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,t.createElement(a.a,{href:"/etc/blog-migration/"},"Hexo에서 Gatsby로 블로그 마이그레이션 작업"),"을 계속 이어 하면서 과정을 한번 더 정리 하였다. 직접 이것 저것 원하는대로 다 커스터마이징 하려다 보니 끝이 없는 것 같다 ㅠ."),"\n",t.createElement(a.h2,null,"disqus"),"\n",t.createElement(a.p,null,"댓글은 disqus를 사용했다. ",t.createElement(a.a,{href:"https://github.com/utterance/utterances"},"utterances"),"도 고려해봤는데 github 아이디가 있어아만 댓글을 쓸 수 있다는 점이 단점으로 느껴져서 그냥 disqus를 계속 사용하기로 했다."),"\n",t.createElement(a.p,null,"Gatsby에서 disqus를 사용하려면 gatsby-plugin-disqus 플러그인을 설치하면 된다."),"\n",t.createElement(a.h3,null,"Install"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> gatsby-plugin-disqus</code></pre></div>'}}),"\n",t.createElement(a.h3,null,"gatsby-config.js"),"\n",t.createElement(a.p,null,"plugins에 gatsby-plugin-disqus를 추가해주자."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 생략...</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 생략...</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">gatsby-plugin-disqus</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">shortname</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">kyoungah</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h3,null,"blogTemplate.tsx"),"\n",t.createElement(a.p,null,"포스트에 관련된 정보를 blogTemplate 컴포넌트에서 호출하고 있기 때문에 여기에 댓글 컴포넌트를 삽입하기로 했다. query문 호출 부분에 id를 호출 할 수 있도록 추가해주었고 gatsby-plugin-disqus의 Disqus 컴포넌트를 사용하여 아주 쉽게 댓글 영역을 추가해주었다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> graphql <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"gatsby"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> styled<span class="token punctuation">,</span> <span class="token punctuation">{</span> theme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../styledComponents"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Disqus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"gatsby-plugin-disqus"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Template</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  data<span class="token punctuation">,</span> <span class="token comment">// this prop will be injected by the GraphQL query below.</span>\n<span class="token punctuation">}</span><span class="token operator">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> markdownRemark <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">// data.markdownRemark holds our post data</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> frontmatter<span class="token punctuation">,</span> html<span class="token punctuation">,</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> markdownRemark<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> disqusConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token string">"https://dev.kyoungah.com"</span> <span class="token operator">+</span> frontmatter<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">identifier</span><span class="token operator">:</span> id<span class="token punctuation">,</span>\n    <span class="token literal-property property">title</span><span class="token operator">:</span> frontmatter<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token operator">></span>\n      <span class="token punctuation">{</span><span class="token comment">/** 포스트 컨텐츠 **/</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>Disqus config<span class="token operator">=</span><span class="token punctuation">{</span>disqusConfig<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// grapthql을 이용하여 markdown에서 데이터를 가지고 온다.</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> pageQuery <span class="token operator">=</span> graphql<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  query ($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: "YYYY년 MM월 DD일")\n        description\n        path\n        title\n      }\n    }\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"KaTeX"),"\n",t.createElement(a.p,null,"이전 블로그에서 수학 수식을 표현해주는 mathjax 라는 js 라이브러리를 사용하고 있었기 때문에 gatsby-remark-mathjax 라는 플러그인을 사용하려고 했으나 설정을 했음에도 불구하고 mathjax가 제대로 실행이 되질 않았다. 계속 방법을 찾아보다가 ",t.createElement(a.a,{href:"https://katex.org/docs/supported.html"},"KaTeX"),"라는걸 알게되었는데 mathjax 처럼 역시 수학 수식을 표현해주는 js 라이브러리 였다. 혹시나 하는 마음에 적용해보았는데 다행히 mathjax와 문법(?)이 같애서 수학 수식이 원하는대로 출력되었다.\ngatsby-remark-katex 플러그인을 사용하려면 gatsby-transformer-remark가 같이 필요한데 나처럼 markdown 작업 등을 미리 해놨으면 이미 설치가 되어 있을 것이다. 없으면 같이 설치해주면 된다."),"\n",t.createElement(a.h3,null,"Install"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> gatsby-remark-katex katex</code></pre></div>'}}),"\n",t.createElement(a.h3,null,"gatsby-config.js"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 생략...</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 생략...</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">gatsby-transformer-remark</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token comment">// 생략 ...</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">gatsby-remark-katex</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token comment">// Add any KaTeX options from https://github.com/KaTeX/KaTeX/blob/master/docs/options.md here</span>\n              <span class="token literal-property property">strict</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ignore</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 생략...</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"Google Analytics"),"\n",t.createElement(a.p,null,"구글 애널리틱스 설정은 gatsby-plugin-google-analytics 플러그인을 사용하였다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> gatsby-plugin-google-analytics</code></pre></div>'}}),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 생략 ...</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 생략...</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">gatsby-plugin-google-analytics</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">trackingId</span><span class="token operator">:</span> <span class="token string">"UA-80236732-4"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"RSS"),"\n",t.createElement(a.p,null,"부끄럽지만 솔직히 말하자면 RSS 기능을 적극적으로 사용해본적이 없어서 생각지도 않고 있었는데 회사 슬랙에서 RSS 봇으로 기술 블로그들의 글을 공유하는걸 보고서 아 나도 추가해야겠구나 싶었다. ",t.createElement(a.a,{href:"https://www.gatsbyjs.org/packages/gatsby-plugin-feed/"},"gatsby-plugin-feed"),"을 사용하면 RSS 기능을 쉽게 추가할 수 있다."),"\n",t.createElement(a.h3,null,"Install"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="markdown"><pre class="language-markdown"><code class="language-markdown">yarn add gatsby-plugin-feed</code></pre></div>'}}),"\n",t.createElement(a.h3,null,"gatsby-config.js"),"\n",t.createElement(a.p,null,"여러가지 옵션들을 추가할 수 있으나 뭐가 뭔지 잘 몰라서 일단 기본으로만 설정해두었다. 추후에 필요한 부분이 있으면 옵션을 추가하여 커스터마이징 할 생각이다."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 생략 ...</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 생략...</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">gatsby-plugin-feed</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"남은 작업"),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"블로그 리스트 pagination 작업"),"\n",t.createElement(a.li,null,"블로그 포스트 pagination 작업"),"\n",t.createElement(a.li,null,"태그 페이지 작업"),"\n",t.createElement(a.li,null,"카테고리 작업"),"\n"),"\n",t.createElement(a.h2,null,"마무리"),"\n",t.createElement(a.p,null,"블로그 마이그레이션 작업을 꽤 진행했는데도 아직 굵직굵직한 작업들이 남았다. 그리고 컴포넌트 구조나 css도 맘에 안들어서 정리도 하고 싶다. 그럼에도 불구하고 내가 원하는 입맛대로 블로그를 만들 수 있으니 블로그 마이그레이션 작업이 너무 재밌다. Gatsby로 블로그 마이그레이션 작업을 시작한게 잘 한 일이라는 생각이 든다. 포기하지말고 꾸준히 마이그레이션 작업을 하여 멋진 블로그를 만들고 싶다."))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.R)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},l=s(2877),c=s(7736),r=s(407),u=s(7735),i=s(685),k=s(2248),g=s(8066),m=s(4848);function d(n){var a,s;let{data:t,children:p}=n;const{date:o,tags:d,title:h}=null!==(a=null==t||null===(s=t.mdx)||void 0===s?void 0:s.frontmatter)&&void 0!==a?a:{};return(0,m.jsx)(c.i,{children:(0,m.jsxs)(l.m,{className:g.q,children:[(0,m.jsx)(k.l,{className:g.V,title:h}),(0,m.jsx)(u.l,{date:o}),(0,m.jsx)(i.I,{tags:d}),(0,m.jsx)(r.E,{children:(0,m.jsx)(e.x,{children:p})})]})})}function h(n){return t.createElement(d,n,t.createElement(o,n))}},407:function(n,a,s){s.d(a,{E:function(){return o}});var t=s(4164),e="post-layout-content-module--post-layout-content-root--01754",p=s(4848);function o(n){let{children:a,className:s,...o}=n;return(0,p.jsx)("div",{className:(0,t.$)(e,s),...o,children:a})}},7735:function(n,a,s){s.d(a,{l:function(){return o}});var t=s(4164),e="post-layout-date-module--post-layout-date-root--f34d1",p=s(4848);function o(n){let{className:a,date:s,...o}=n;return(0,p.jsx)("span",{className:(0,t.$)(e,a),...o,children:s})}},685:function(n,a,s){s.d(a,{I:function(){return l}});var t=s(9143),e=s(4194),p="post-layout-module--post-layout-tags--837df",o=s(4848);function l(n){let{tags:a}=n;return(0,o.jsx)(t.Y,{className:p,children:a.map((n=>(0,o.jsx)(e.Link,{to:"/tags/"+n,children:(0,o.jsx)(t.Y.Tag,{tag:n})},n)))})}},2248:function(n,a,s){s.d(a,{l:function(){return o}});var t=s(4164),e="post-layout-title-module--post-layout-title-root--88374",p=s(4848);function o(n){let{className:a,title:s,...o}=n;return(0,p.jsx)("h1",{className:(0,t.$)(e,a),...o,children:s})}},9143:function(n,a,s){s.d(a,{Y:function(){return p}});var t=s(4164),e=s(4848);const p=Object.assign((function(n){let{children:a,className:s,...p}=n;return(0,e.jsx)("div",{className:(0,t.$)("tags-module--tags-root--e3461",s),...p,children:a})}),{Tag:function(n){let{className:a,tag:s,...p}=n;return(0,e.jsx)("span",{className:(0,t.$)("tag-module--tag-root--aae01",a),...p,children:s})}})},2877:function(n,a,s){s.d(a,{m:function(){return o}});var t=s(4164),e="container-module--container-root--3b208",p=s(4848);function o(n){let{children:a,className:s,...o}=n;return(0,p.jsx)("div",{className:(0,t.$)(e,s),...o,children:a})}},2629:function(n,a,s){s.d(a,{$:function(){return o}});var t=s(4164),e="basic-layout-module--basic-layout-root--a11e0",p=s(4848);function o(n){let{children:a,className:s,...o}=n;return(0,p.jsx)("div",{className:(0,t.$)(e,s),...o,children:a})}},7736:function(n,a,s){s.d(a,{i:function(){return f}});var t=s(4194),e=s(4164),p="header-module--about--32ac9",o="header-module--header-logo--5bbdc",l="header-module--header-navigation--24bcb",c="header-module--header-navigation-item--ba248",r="header-module--header-navigation-item-link--d6da9",u="header-module--header-navigation-list--3815c",i="header-module--header-root--01ceb",k="header-module--tags--eb332",g=s(4848);function m(){return(0,g.jsxs)("header",{className:i,children:[(0,g.jsx)(t.Link,{to:"/",children:(0,g.jsx)("img",{src:"/images/logo.png",srcSet:"/images/logo-small.png 200w, /images/logo.png 300w",sizes:"(max-width: 360px) 200px, 300px",alt:"dev.kyoungah.me",className:o})}),(0,g.jsx)("nav",{className:l,children:(0,g.jsxs)("ul",{className:u,children:[(0,g.jsx)("li",{className:c,children:(0,g.jsx)(t.Link,{to:"/tags",children:(0,g.jsx)("span",{"aria-label":"tags",className:(0,e.$)(r,k)})})}),(0,g.jsx)("li",{className:c,children:(0,g.jsx)("a",{href:"/about",rel:"noopener",target:"_blank",children:(0,g.jsx)("span",{"aria-label":"about",className:(0,e.$)(r,p)})})})]})})]})}var d="footer-module--footer-root--795ff";function h(){return(0,g.jsxs)("footer",{className:d,children:[(0,g.jsx)("span",{children:"Powered by Gatsby, Hosted by GitHub Pages."}),(0,g.jsxs)("span",{children:["©",(0,g.jsx)("a",{href:"https://github.com/partykyoung",rel:"noreferrer",target:"_blank",children:"KyoungAh"}),", All rights reserved."]})]})}var y=s(2629);function f(n){let{children:a}=n;return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)(m,{}),(0,g.jsx)(y.$,{children:a}),(0,g.jsx)(h,{})]})}},8066:function(n,a,s){s.d(a,{V:function(){return e},q:function(){return t}});var t="post-layout-module--post-layout-container--f40b5",e="post-layout-module--post-layout-title--1c575"},8453:function(n,a,s){s.d(a,{R:function(){return o},x:function(){return l}});var t=s(6540);const e={},p=t.createContext(e);function o(n){const a=t.useContext(p);return t.useMemo((function(){return"function"==typeof n?n(a):{...a,...n}}),[a,n])}function l(n){let a;return a=n.disableParentContext?"function"==typeof n.components?n.components(e):n.components||e:o(n.components),t.createElement(p.Provider,{value:a},n.children)}},4164:function(n,a,s){function t(n){var a,s,e="";if("string"==typeof n||"number"==typeof n)e+=n;else if("object"==typeof n)if(Array.isArray(n)){var p=n.length;for(a=0;a<p;a++)n[a]&&(s=t(n[a]))&&(e&&(e+=" "),e+=s)}else for(s in n)n[s]&&(e&&(e+=" "),e+=s);return e}function e(){for(var n,a,s=0,e="",p=arguments.length;s<p;s++)(n=arguments[s])&&(a=t(n))&&(e&&(e+=" "),e+=a);return e}s.d(a,{$:function(){return e}})}}]);
//# sourceMappingURL=component---src-app-templates-post-template-post-layout-ui-tsx-content-file-path-posts-2019-07-21-blog-migration-2-md-a91cc6c3bb48d4d5b136.js.map