"use strict";(self.webpackChunkkyoungah_dev_blog=self.webpackChunkkyoungah_dev_blog||[]).push([[831],{5904:function(e,n,t){t.r(n),t.d(n,{default:function(){return h}});var a=t(6540),s=t(8453);function l(e){const n=Object.assign({h2:"h2",p:"p",blockquote:"blockquote",strong:"strong",img:"img",a:"a",span:"span",ul:"ul",li:"li"},(0,s.R)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h2,null,"AWS Route 53"),"\n",a.createElement(n.p,null,"높은 가용성과 확장성이 뛰어난 클라우드 Domain Name System (DNS) 웹 서비스. 일반적인 DNS 기능 + 모니터링 기능 + 서버 로드 밸런싱 기능 + 글로벌 서버 로드 밸런싱 기능을 제공한다."),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"DNS (Domain Name System)"),": 네트워크에 연결된 호스트들은 각각 IP 주소들을 가지고 있다. 이 IP 주소는 사람이 이해하고 기억하기 어렵기 때문에 각 IP 주소마다 도메인 이름을 부여한다. DNS는 특정 도메인에 대한 요청이 들어오면 도메인에 대한 IP 주소를 반환해준다. 반대로 IP 주소에 대한 도메인 이름을 반환해 줄 수도 있다."),"\n"),"\n",a.createElement(n.p,null,"Route 53은 프리티어 대상이 아니므로 매달 사용한 만큼 요금이 빠져나간다. 다행히 요금은 저렴한 편이다."),"\n",a.createElement(n.h2,null,"Route 53 도메인 등록"),"\n",a.createElement(n.p,null,"AWS에서 사용하고 있는 서비스에 도메인을 등록하기 위해서는 먼저 Route 53 서비스에 도메인을 등록해야 한다. 도메인은 AWS 서비스에서도 구매할 수 있고 카페 24나 호스팅kr 같은 국내 호스팅 서비스에서도 구매할 수 있다. 나는 국내 호스팅 서비스에서 토이 프로젝트에 사용할 wolfonair.com 도메인을 구입했다. 이 도메인을 AWS Route 53 서비스에 등록해보자."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-1.png",alt:"AWS 서비스 메뉴"}),"\n",a.createElement(n.p,null,"AWS 서비스 메뉴 검색창에서 Route 53을 검색하거나 메뉴 목록에서 Route 53을 클릭하여 Route 53 대쉬보드 창으로 이동한다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-2.png",alt:"DNS 관리"}),"\n",a.createElement(n.p,null,"DNS 관리에서 호스팅 영역 생성 버튼을 클릭한다."),"\n",a.createElement(n.p,null,"호스팅 영역이란 레코드의 컨테이너이다. 레코드에는 특정 도메인과(ex: example.com)과 하위 도메인(ex: api.example.com, cdn.example.com)의 트래픽을 라우팅하는 방식에 대한 정보가 포함된다. 호스팅 영역과 해당 도메인의 이름은 동일하다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-3.png",alt:"호스팅 영역 구성"}),"\n",a.createElement(n.p,null,"소유하고 있는 도메인 이름을 입력한다. 설명은 입력해도 되고 그냥 냅둬도 된다."),"\n",a.createElement(n.p,null,"퍼블릭 호스팅 영역은 누구나 인터넷에서 도메인을 입력하여 트래픽을 라우팅 할 수 있고 프라이빗 호스팅 영역은 AWS VPC 내에서만 사용할 수 있다.\n때문에 프라이빗 클라우드를 만드는게 아니면 유형 부분은 따로 건드릴 필요가 없고 퍼블릭 호스팅 영역으로 그대로 두면 된다."),"\n",a.createElement(n.p,null,"쭉 내려서 호스팅 영역 생성 버튼을 눌러주면 호스팅 영역 생성이 완료된다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-4.png",alt:"호스팅 영역 구성"}),"\n",a.createElement(n.p,null,"생성이 완료되면 NS(네임서버) 레코드와 SOA(권한시작) 레코드가 자동 생성된다. 이 네임서버가 등록한 도메인이 사용할 네임서버이기 때문에 등록한 도메인의 네임서버를 Route 53의 네임서버로 교체해주어야 한다."),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"네임 서버"),": DNS를 운영하는 서버. 특정 도메인이 어떤 IP와 연결되었다는 것을 기록하고 이것을 다른 DNS들에게 전파하는 역할을 한다. 예를 들어 abc.com 이라는 도메인이 있으면 이 도메인을 192.168.0.1 이라는 아이피를 가진 서버와 연결을 해준다."),"\n"),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-5.png",alt:"네임서버 수정"}),"\n",a.createElement(n.p,null,"도메인을 구입한 사이트로 이동하여 구입한 도메인의 DNS 관리 화면으로 이동한 후 네임서버 항목에 Route 53의 네임서버 4개를 입력하고 확인 또는 저장 버튼을 누르면 네임서버 수정이 완료 된다."),"\n",a.createElement(n.p,null,"Route 53을 이용하면 S3, CloudFront, EC2, ELB 등 몇몇 AWS 리소스에 도메인을 쉽게 연동할 수 있다. Route 53에 도메인 등록 하는 작업을 완료 했으니 기존에 사이드 프로젝트로 사용하고 있던 CloudFront, Api gateway에 도메인을 한번 연동해보자."),"\n",a.createElement(n.h2,null,"AWS Certificate Manager 설정"),"\n",a.createElement(n.p,null,"Route 53에 도메인을 등록하면 AWS Certificate Manageer을 사용하여 무료로 SSL 인증서를 발급받을 수 있다."),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"SSL 인증서"),": 클라이언트와 서버간의 통신을 제3자가 보증해주는 전자화된 문서. 웹서버와 웹사이트에서 이루어지는 모든 정보전송을 https 암호화 프로토콜을 통해 안전하게 전송되도록 하는 인증서이다."),"\n"),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-6.png",alt:"AWS 서비스 메뉴"}),"\n",a.createElement(n.p,null,"AWS 서비스 메뉴에서 Certificate Manager을 검색하여 Certificate Manager 메뉴 대시보드 화면으로 이동한다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-7.png",alt:"인증서 프로비저닝 선택"}),"\n",a.createElement(n.p,null,"아무 인증서도 발급받지 않은 상태라면 위의 이미지와 같은 화면이 뜬다. 여기서 인증서 프로비저닝 항목 밑의 시작하기 버튼을 클릭한다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-8.png",alt:"공인 인증서 요청 선택"}),"\n",a.createElement(n.p,null,"공인 인증서 요청 항목을 선택한 후 인증서 요청 버튼을 클릭한다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-9.png",alt:"도메인 이름 추가"}),"\n",a.createElement(n.p,null,"도메인 이름 항목에 Route 53에 등록한 도메인을 입력한다. 하위 도메인도 사용하려면 '*.도메인 이름' 으로 등록해주면 된다. 도메인 입력이 완료 되었으면 확인 버튼을 클릭한다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-10.png",alt:"검증 방법 선택"}),"\n",a.createElement(n.p,null,"DNS 검증 항목을 선택한 후 다음 버튼을 클릭한다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-11.png",alt:"태그 추가"}),"\n",a.createElement(n.p,null,"태그 추가는 필수가 아니라 그냥 무시하고 검토 버튼을 눌러 다음 화면으로 넘어가도 상관없다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-12.png",alt:"검토"}),"\n",a.createElement(n.p,null,"실수한 부분이 있는지 잘 확인한 후 없으면 확인 및 요청 버튼을 클릭한다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-13.png",alt:"검증 화면"}),"\n",a.createElement(n.p,null,"도메인이 검증 보류 상태로 등록되었다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-14.png",alt:"검증 화면 2"}),"\n",a.createElement(n.p,null,"도메인 앞의 화살표 버튼을 누르면 CNAME 레코드 항목을 추가하라는 화면이 출력된다. Route 53에 등록한 도메인은 Route 53에서 레코드 생성 버튼을 클릭하여 자동으로 CNAME 레코드 항목을 생성할 수 있다. Route 53에서 레코드 생성 버튼을 클릭한다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-15.png",alt:"Route 53에서 레코드 생성"}),"\n",a.createElement(n.p,null,"생성 버튼을 클릭한다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-16.png",alt:"Route 53에서 레코드 생성 성공"}),"\n",a.createElement(n.p,null,"성공 메시지가 뜨면 완료가 된 것이다. 검증이 완료 되려면 최대 30분 정도 걸릴 수 있다고 했지만 체감상 1 ~ 2분 걸렸던 것 같다."),"\n",a.createElement(n.h2,null,"CloudFront 커스텀 도메인 설정"),"\n",a.createElement(n.p,null,"저번에 현재 진행하고 있는 ",a.createElement(n.a,{href:"/2020-07-26-etc-aws-s3-hosting/"},"사이드 프로젝트를 S3에 업로드 한 후 CloudFront 설정"),"까지 했었다. CloudFront를 사용하여 S3에 올라가있는 웹페이지에 커스텀 도메인을 연결해보자."),"\n",a.createElement(n.p,null,"AWS 서비스 메뉴에서 CloudFront를 검색하여 해당 서비스로 이동하면 CloudFront Distributions 목록을 확인할 수 있다. 도메인 연결을 원하는 Distribution 항목의 ID를 클릭하여 상세 페이지로 이동한 후 General 탭에 있는 Edit 버튼을 눌러 편집 화면으로 이동할 수 있다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-17.png",alt:"클라우드 프론트 커스텀 도메인 설정"}),"\n",a.createElement(n.p,null,"Alternate Domain Names 항목에서 Route 53에 등록된 도메인을 입력한다. SSL Certificate 항목에서 Custom SSL Certificate 항목을 선택하고 인증서를 선택한 후 스크롤을 쭉 내려 Edit 버튼을 클릭해주면 도메인 연결이 끝난다."),"\n",a.createElement(n.p,null,"CloudFront에서 ssl 인증서를 적용하려면 미국 동부(버지니아 북부, us-east-1) 리전에도 SSL 인증서가 있어야 한다. 다행히 Certificate Manager 서비스는 무료이므로 미국 동부 리전을 선택한 후 Certificate Manager 서비스로 똑같이은 방법으로 SSL 인증서를 발급받을 수 있다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-18.png",alt:"커스텀 도메인 설정 완료"}),"\n",a.createElement(n.p,null,"약 1분이 지난후 웹브라우저 url에 커스텀 도메인을 입력하면 접속이 잘 되는 것을 확인할 수 있다."),"\n",a.createElement(n.h2,null,"API Gateway 도메인 설정 (feat. Serverless)"),"\n",a.createElement(n.p,null,"AWS에서 제공하는 Lambda와 API Gateway 서비스를 같이 사용하면 서버리스 아키텍처로 백엔드 서버를 운영할 수 있다. Serverless 프레임워크를 사용하면 아주 간편하게 Lambda 작성 및 배포까지 가능한데 serverless-domain-manager 플러그인을 추가로 사용하면 커스텀 도메인 설정까지 가능하다."),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">acm:ListCertificates                *\napigateway:GET                      /domainnames/*\napigateway:GET                      /domainnames/*/basepathmappings\napigateway:DELETE                   /domainnames/*\napigateway:POST                     /domainnames\napigateway:POST                     /domainnames/*/basepathmappings\napigateway:PATCH                    /domainnames/*/basepathmapping\ncloudformation:GET                  *\ncloudfront:UpdateDistribution       *\nroute53:ListHostedZones             *\nroute53:ChangeResourceRecordSets    hostedzone/{HostedZoneId}\nroute53:GetHostedZone               *\nroute53:ListResourceRecordSets      *\niam:CreateServiceLinkedRole         arn:aws:iam::${AWS::AccountId}: role/aws-service-role/ops.ap</code></pre></div>'}}),"\n",a.createElement(n.p,null,"serverless-domain-manager 플러그인을 사용하려면 Serverless에 연동되어 있는 IAM 권한에 위의 권한이 추가로 더 필요하다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-19.png",alt:"IAM 권한 설정"}),"\n",a.createElement(n.p,null,"일단은 관련된 권한을 찾은 후 FullAccess 권한을 주긴 했는데 좀 더 안전한 보안을 위해서 나중에 다시 수정할 예정이다."),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">npm install serverless-domain-manager --save-dev\n</code></pre></div>'}}),"\n",a.createElement(n.p,null,"serverless-domain-manager 플러그인을 설치한다."),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yml"><pre class="language-yml"><code class="language-yml"><span class="token key atrule">plugins</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> serverless<span class="token punctuation">-</span>webpack\n  <span class="token punctuation">-</span> serverless<span class="token punctuation">-</span>offline\n  <span class="token punctuation">-</span> serverless<span class="token punctuation">-</span>dotenv<span class="token punctuation">-</span>plugin\n  <span class="token punctuation">-</span> serverless<span class="token punctuation">-</span>domain<span class="token punctuation">-</span>manager\n\n<span class="token key atrule">custom</span><span class="token punctuation">:</span>\n  <span class="token key atrule">customDomain</span><span class="token punctuation">:</span>\n    <span class="token key atrule">domainName</span><span class="token punctuation">:</span> api.wolfonair.com\n    <span class="token key atrule">stage</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>self<span class="token punctuation">:</span>provider.stage<span class="token punctuation">}</span>\n    <span class="token key atrule">certificateName</span><span class="token punctuation">:</span> <span class="token string">"*.wolfonair.com"</span>\n    <span class="token key atrule">createRoute53Record</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">endpointType</span><span class="token punctuation">:</span> regional\n    <span class="token key atrule">securityPolicy</span><span class="token punctuation">:</span> tls_1_2\n    <span class="token key atrule">apiType</span><span class="token punctuation">:</span> rest</code></pre></div>'}}),"\n",a.createElement(n.p,null,"serverless.yml파일에서 plugins 항목에는 serverless-domain-manager을 추가해주고 custom 항목에는 coustomDomain 설정을 추가로 넣어준다."),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">sls create_domain\nsls deploy</code></pre></div>'}}),"\n",a.createElement(n.p,null,"위의 명령어를 실행해주면 도메인 설정이 끝난다."),"\n",a.createElement(n.img,{src:"/images/posts/aws-route-53-20.png",alt:"API Gateway 사용자 지정 도메인 이름"}),"\n",a.createElement(n.p,null,"AWS API Gateway 서비스에 직접 들어가 사용자 지정 도메인 이름 항목을 클릭해보면 도메인이 정상 등록 된 것을 확인할 수 있다."),"\n",a.createElement(n.h2,null,"마무리"),"\n",a.createElement(n.p,null,"이렇게 Route 53을 이용하여 도메인을 등록하고 Certificate Manager를 이용하여 SSL 인증서 까지 발급받은 후 CloudFront, API Gateway에 도메인 연결까지 해보았다. EC2에도 SSL 인증서를 적용하여 커스텀 도메인을 달고 싶었는데 ELB를 사용하여 좀 편하게 SSL 인증서를 적용하려 했더니 ELB가 따로 프리티어를 제공하질 않는다는걸 알고 일단은 잠시 보류하기로 했다. 다음에 시간이 날때 무료 SSL 인증서를 이용하여 EC2에 https를 적용한 커스텀 도메인을 달아봐야겠다."),"\n",a.createElement(n.h2,null,"Reference"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"https://www.youtube.com/watch?v=Nr7nLwfvT3Y"},"Amazon Route53 101 - 서태호 | 강남비기너모임 : AWS Community Day")),"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"https://xetown.com/topics/1125037"},"많이 혼돈하시는 네임서버와 DNS")),"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"https://velog.io/@minholee_93/AWS-Route-53-DNS-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-8lk40vfqt4#2-route-53-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0"},"AWS Route 53 DNS 서비스 사용하기")),"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"https://musma.github.io/2019/09/16/what-to-do-after-you-buy-your-new-domain-on-aws.html#aws-certificate-manager-ssltls-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EB%B0%9C%EA%B8%89"},"새 도메인 이름 구입한 후 AWS에서 해야할 일")),"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"https://react-etc.vlpt.us/08.deploy-s3.html"},"리액트 앱 AWS S3, CloudFront 에 배포하기")),"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"https://www.serverless.com/plugins/serverless-domain-manager"},"Serverless Domain Manager")),"\n"),"\n"))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.R)(),e.components);return n?a.createElement(n,e,a.createElement(l,e)):l(e)},o=t(2877),c=t(7736),u=t(407),i=t(7735),m=t(685),p=t(2248),g=t(8066),d=t(4848);function E(e){var n,t;let{data:a,children:l}=e;const{date:r,tags:E,title:h}=null!==(n=null==a||null===(t=a.mdx)||void 0===t?void 0:t.frontmatter)&&void 0!==n?n:{};return(0,d.jsx)(c.i,{children:(0,d.jsxs)(o.m,{className:g.q,children:[(0,d.jsx)(p.l,{className:g.V,title:h}),(0,d.jsx)(i.l,{date:r}),(0,d.jsx)(m.I,{tags:E}),(0,d.jsx)(u.E,{children:(0,d.jsx)(s.x,{children:l})})]})})}function h(e){return a.createElement(E,e,a.createElement(r,e))}},407:function(e,n,t){t.d(n,{E:function(){return r}});var a=t(4164),s="post-layout-content-module--post-layout-content-root--01754",l=t(4848);function r(e){let{children:n,className:t,...r}=e;return(0,l.jsx)("div",{className:(0,a.$)(s,t),...r,children:n})}},7735:function(e,n,t){t.d(n,{l:function(){return r}});var a=t(4164),s="post-layout-date-module--post-layout-date-root--f34d1",l=t(4848);function r(e){let{className:n,date:t,...r}=e;return(0,l.jsx)("span",{className:(0,a.$)(s,n),...r,children:t})}},685:function(e,n,t){t.d(n,{I:function(){return o}});var a=t(9143),s=t(4194),l="post-layout-module--post-layout-tags--837df",r=t(4848);function o(e){let{tags:n}=e;return(0,r.jsx)(a.Y,{className:l,children:n.map((e=>(0,r.jsx)(s.Link,{to:"/tags/"+e,children:(0,r.jsx)(a.Y.Tag,{tag:e})},e)))})}},2248:function(e,n,t){t.d(n,{l:function(){return r}});var a=t(4164),s="post-layout-title-module--post-layout-title-root--88374",l=t(4848);function r(e){let{className:n,title:t,...r}=e;return(0,l.jsx)("h1",{className:(0,a.$)(s,n),...r,children:t})}},9143:function(e,n,t){t.d(n,{Y:function(){return l}});var a=t(4164),s=t(4848);const l=Object.assign((function(e){let{children:n,className:t,...l}=e;return(0,s.jsx)("div",{className:(0,a.$)("tags-module--tags-root--e3461",t),...l,children:n})}),{Tag:function(e){let{className:n,tag:t,...l}=e;return(0,s.jsx)("span",{className:(0,a.$)("tag-module--tag-root--aae01",n),...l,children:t})}})},2877:function(e,n,t){t.d(n,{m:function(){return r}});var a=t(4164),s="container-module--container-root--3b208",l=t(4848);function r(e){let{children:n,className:t,...r}=e;return(0,l.jsx)("div",{className:(0,a.$)(s,t),...r,children:n})}},2629:function(e,n,t){t.d(n,{$:function(){return r}});var a=t(4164),s="basic-layout-module--basic-layout-root--a11e0",l=t(4848);function r(e){let{children:n,className:t,...r}=e;return(0,l.jsx)("div",{className:(0,a.$)(s,t),...r,children:n})}},7736:function(e,n,t){t.d(n,{i:function(){return y}});var a=t(4194),s=t(4164),l="header-module--about--32ac9",r="header-module--header-logo--5bbdc",o="header-module--header-navigation--24bcb",c="header-module--header-navigation-item--ba248",u="header-module--header-navigation-item-link--d6da9",i="header-module--header-navigation-list--3815c",m="header-module--header-root--01ceb",p="header-module--tags--eb332",g=t(4848);function d(){return(0,g.jsxs)("header",{className:m,children:[(0,g.jsx)(a.Link,{to:"/",children:(0,g.jsx)("img",{src:"/images/logo.png",srcSet:"/images/logo-small.png 200w, /images/logo.png 300w",sizes:"(max-width: 360px) 200px, 300px",alt:"dev.kyoungah.me",className:r})}),(0,g.jsx)("nav",{className:o,children:(0,g.jsxs)("ul",{className:i,children:[(0,g.jsx)("li",{className:c,children:(0,g.jsx)(a.Link,{to:"/tags",children:(0,g.jsx)("span",{"aria-label":"tags",className:(0,s.$)(u,p)})})}),(0,g.jsx)("li",{className:c,children:(0,g.jsx)("a",{href:"/about",rel:"noopener",target:"_blank",children:(0,g.jsx)("span",{"aria-label":"about",className:(0,s.$)(u,l)})})})]})})]})}var E="footer-module--footer-root--795ff";function h(){return(0,g.jsxs)("footer",{className:E,children:[(0,g.jsx)("span",{children:"Powered by Gatsby, Hosted by GitHub Pages."}),(0,g.jsxs)("span",{children:["©",(0,g.jsx)("a",{href:"https://github.com/partykyoung",rel:"noreferrer",target:"_blank",children:"KyoungAh"}),", All rights reserved."]})]})}var f=t(2629);function y(e){let{children:n}=e;return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)(d,{}),(0,g.jsx)(f.$,{children:n}),(0,g.jsx)(h,{})]})}},8066:function(e,n,t){t.d(n,{V:function(){return s},q:function(){return a}});var a="post-layout-module--post-layout-container--f40b5",s="post-layout-module--post-layout-title--1c575"},8453:function(e,n,t){t.d(n,{R:function(){return r},x:function(){return o}});var a=t(6540);const s={},l=a.createContext(s);function r(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(l.Provider,{value:n},e.children)}},4164:function(e,n,t){function a(e){var n,t,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e)){var l=e.length;for(n=0;n<l;n++)e[n]&&(t=a(e[n]))&&(s&&(s+=" "),s+=t)}else for(t in e)e[t]&&(s&&(s+=" "),s+=t);return s}function s(){for(var e,n,t=0,s="",l=arguments.length;t<l;t++)(e=arguments[t])&&(n=a(e))&&(s&&(s+=" "),s+=n);return s}t.d(n,{$:function(){return s}})}}]);
//# sourceMappingURL=component---src-app-templates-post-template-post-layout-ui-tsx-content-file-path-posts-2020-08-30-etc-aws-route-53-md-d05a3aefb870c8708af2.js.map